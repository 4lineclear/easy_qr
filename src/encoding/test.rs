use crate::{ErrorCorrection, QRCodeVersion};

use super::encode_numeric;

#[test]
fn test_numeric() {
    let version = QRCodeVersion::V1;
    let ec = ErrorCorrection::H;
    let correct = [
        [0x10, 0x06, 0x40, 0xEC, 0x11, 0xEC, 0x11, 0xEC, 0x11],
        [0x10, 0x0B, 0x18, 0x00, 0xEC, 0x11, 0xEC, 0x11, 0xEC],
        [0x10, 0x0F, 0xE7, 0x00, 0xEC, 0x11, 0xEC, 0x11, 0xEC],
        [0x10, 0x13, 0xE7, 0x90, 0xEC, 0x11, 0xEC, 0x11, 0xEC],
        [0x10, 0x17, 0xE7, 0xC6, 0x00, 0xEC, 0x11, 0xEC, 0x11],
        [0x10, 0x1B, 0xE7, 0xF9, 0xC0, 0xEC, 0x11, 0xEC, 0x11],
        [0x10, 0x1F, 0xE7, 0xF9, 0xE4, 0x00, 0xEC, 0x11, 0xEC],
        [0x10, 0x23, 0xE7, 0xF9, 0xF1, 0x80, 0xEC, 0x11, 0xEC],
        [0x10, 0x27, 0xE7, 0xF9, 0xFE, 0x70, 0xEC, 0x11, 0xEC],
    ];
    for (s, a) in [
        "9",
        "99",
        "999",
        "9999",
        "99999",
        "999999",
        "9999999",
        "99999999",
        "999999999",
    ]
    .into_iter()
    .zip(correct)
    {
        let encoded = encode_numeric(s, version, ec);
        assert_eq!(encoded, a, "{s}");
    }
}
